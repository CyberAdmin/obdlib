"""
<Program>
  obdlib.repy 
  
<Date Started>
  June 26th, 2014
	
<Author>
  Mike Reininger, NYU-Poly, USA
<Purpose>
  OBD sensor library for collecting vehicular sensor data.

<Usage/Help>
  OBD-II ELM327 sensors can be used to communicate between a car's controller area network (CAN), also known as the car's electronic brains, and a computer or mobile device. 
  They can be purchased online (suggested model: http://amzn.com/B00AOIM2CC).

  How to connect to the OBD on the Android:
  1. Plug the device into the OBD port under the steering wheel, near the pedals. 
  2. Navigate to your Android's settings --> wireless settings --> connect to wifi router.
  3. Choose WiFi_OBDii. 
  
<TODOs>
  3. Finish '?' error code response for developer, also for return type 'NO DATA'. (ln 106)
  4. Test with cars.
"""



"""
<Purpose>
  OBD sensor data retrieval functions.
"""
# Returns speed in KPH, however a KPH --> MPH converter function is provided below.  
def getSpeed():
  return get_obd_data('01 0D')
  
# Since RPM is sent to the Android in increments of 1/4 rpm, we divide the sensor value by 4 to obtain the real RPM (according to: http://elmelectronics.com/DSheets/ELM327DS.pdf)
def getRPM():
  return get_obd_data('01 0C')/4

# Useful for calculating instantaneous fuel consumption.
def getMAF():
  return get_obd_data('01 10')

# Returns fuel pressure.
def getFuelPressure():
  return get_obd_data('01 0A')

# Returns the distance traveled with the "check engine light" on.
def getDistanceTraveledWithMIL():
  return get_obd_data('01 21')

# Returns barometric pressure.
def getBarometricPressure():
  return get_obd_data('01 33')

# Returns the car's VIN number.
def getVIN():
  return get_obd_data('09 02')

# Returns how much the gas pedal is depressed (0-100%)  
def getThrottlePosition():
  return get_obd_data('01 11') 

# Returns how much fuel is in the tank (0-100%)
def getFuelLevel():
  return get_obd_data('01 2F')
  
# Returns the current location of the phone. This needs to be parsed elsewhere.
def getCurrentLocation():
  request_data(mycontext['sensor_socket'], 'startLocating', [])
  # Loop GPS querying until we get a valid response. The loop will break once SL4A returns a response that should start with {u'network' ... .
  while True:
    try:
      sensor_data = request_data(mycontext['sensor_socket'], 'readLocation', []) 
      if str(sensor_data).startswith("{u'network'"):
        break
    except Exception as e:
      log('\n[obdlib] ',str(e), '\n')
      request_data(mycontext['sensor_socket'], 'stopSensing', []) 
      mycontext['sensor_socket'].close()
  return sensor_data

# Returns the fuel consumption. [NEEDS TO BE DOUBLE CHECKED]
def getFuelConsumption():
  # Use MAF and VSS to calculate the instantaneous fuel consumption rate. This is done through the formula posted here: http://www.lightner.net/lightner/bruce/Lightner-183.pdf
  mpg = 710.7 * getSpeed()/getMAF()
  return mpg

"""
<Purpose>
  OBD-II sensor functions.
"""
def get_obd_data(pid):
  # Check if mycontext['OBDIP'] and mycontext['OBDPort'] have been set.
  if(mycontext['OBDIP'] == '' or mycontext['OBDIP'] == None or mycontext['OBDPort'] == '' or mycontext['OBDPort'] == None):
    log('[obdlib] Error: OBDIP or OBDPort not assigned.')
  else:
    cmd = pid[3:5]
    sleep(1)
    socketobject = openconnection(mycontext['OBDIP'],mycontext['OBDPort'],getmyip(),63157,5000)   
    socketobject.send(pid+'\n')
    # System needs to wait before it closes the socket, or else OBD sensor data never arrives to the phone.
    sleep(3)
    # We should only be reading about 10 bytes.
    data = socketobject.recv(15)
    socketobject.close()
    # Needs to be finished after trimmer function is done.
    if data == '?\n>':
      log('[obdlib] Error: PID not understood by car.')
    elif data == 'NO DATA\n>':
      log('[obdlib] Error: No data provided for specified PID.')
    else:
      return toDecimal(trimmer(data, cmd))

# This is used if the developer wants to send a specific PID to the OBD device, perhaps not one listed above...  
def send_obd_command(pid):
  if(mycontext['OBDIP'] == '' or mycontext['OBDIP'] == None or mycontext['OBDPort'] == '' or mycontext['OBDPort'] == None):
    log('[obdlib] Error: OBDIP or OBDPort not assigned.')
  else:
    socketobject = openconnection(mycontext['OBDIP'],mycontext['OBDPort'],getmyip(),63157,5000)   
    socketobject.send(pid+'\n')
    # System needs to wait before it closes the socket, or else OBD sensor data never arrives to the phone.
    sleep(3)
    data = socketobject.recv(15)
    socketobject.close()
    # Needs improvement (task 4). If data is not understood, then obdlib will notify the user in the logs.
    if data == '?\n>':
      log('\n[obdlib] Error: PID not understood by car.')
    elif data == 'NO DATA\n>':
      log('[obdlib] Error: No data provided for specified PID.')
    else:
      log("\n[obdlib] Sent command: ",pid," with response: ",data)


# It is good practice to reset the OBD in case it has been programmed otherwise. [OPTIONAL]
def resetOBD():
  send_obd_command('AT Z')

# It is good practice to set the OBD's protocol to automatic, so that this library can communicate with it, in case it has been changed otherwise. [OPTIONAL]
def setAutomaticProtocol():
  send_obd_command('AT SP 0')

"""
<Purpose>
  obdlib.repy added functions.
"""
# Needed to trim the data from the OBD-II. This will remove the hex headers (ie. 41 {PID}), and then join 4 byte hex. It is then converted in get_obd_data()
def trimmer(data, cmd):
  data = data[data.index(cmd)+3:-2]
  data = data.replace(" ","")
  return data

# Used to convert hex to decimal.  
def toDecimal(data):
  return int(data, 16)

# Used to convert KPH to MPH.
def toMPH(k):
  return float(k)/1.609344

# Sets OBD IP. Default is 192.168.0.10 (usually what the ELM327 manufacturer programs into the OBD-II sensor).
def setOBDIP(ip):
  if ip==None:
    mycontext['OBDIP'] = '192.168.0.10'
  else:
    mycontext['OBDIP'] = ip

# Sets OBD port. Default is 35000 (usually what the ELM327 manufacturer programs into the OBD-II sensor).
def setOBDPort(port):
  if port==None:
    mycontext['OBDPort'] = 35000
  else:
    mycontext['OBDPort'] = port   

"""
<Purpose>
  Initialization functions.
"""
# Setting OBDIP and OBDPort to default values, which are pre-programmed into the OBD-II ELM327 wifi sensor (192.168.0.10:35000).
def defaultSetup():
  setOBDIP('192.168.0.10')
  setOBDPort(35000)

# Or, custom setup is also an option.
def customSetup(ip,port):
  setOBDIP(ip)
  setOBDPort(int(port))

# Sensor port (SL4A port) can be modified in obd.r2py. 
def setSensorPort(port):
  mycontext['sensor_port'] = port
  mycontext['sensor_socket'] = getconnection(mycontext['sensor_port'])
